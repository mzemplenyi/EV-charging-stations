hamMean<- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/", folderName[i],"/Scen",Scen[i],"/hammingMean_Results.csv",sep=""), na.strings = "NaN", header = F)
nSIM <- nrow(hamMean)
nExp <- ncol(hamMean)
method <- c(method, rep(folderName[i], times = nExp))
scenario <- c(scenario, rep(Scen[i], times = nExp))
experiment <- c(experiment, 1:nExp)
avg.hamMean <- c(avg.hamMean, apply(hamMean, MARGIN = 2, function(x) mean(x,na.rm = T)))
med.hamMean <- c(med.hamMean, apply(hamMean, MARGIN = 2, function(x) median(x,na.rm = T)))
se.ham <- apply(hamMean, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.hamMean <- c(halfCI.hamMean, (qt(0.975,nSIM-1) * se.ham)) # 95% CI
halfCI.hamMean <- c(halfCI.hamMean, se.ham) # one standard error
# accuracy of network inference
tpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tpr <- c(avg.tpr, apply(tpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tpr  <- apply(tpr, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.tpr <- c(halfCI.tpr, (qt(0.975,nSIM-1) * se.tpr)) # 95% CI
halfCI.tpr <- c(halfCI.tpr, se.tpr) # one standard error
fpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fpr <- c(avg.fpr, apply(fpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fpr  <- apply(fpr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fpr <- c(halfCI.fpr, (qt(0.975,nSIM-1) * se.fpr))
tnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tnr <- c(avg.tnr, apply(tnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tnr  <- apply(tnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.tnr <- c(halfCI.tnr, (qt(0.975,nSIM-1) * se.tnr))
fnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fnr <- c(avg.fnr, apply(fnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fnr  <- apply(fnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fnr <- c(halfCI.fnr, (qt(0.975,nSIM-1) * se.fnr))
}
# combine columns into dataframe
df <- data.frame("Method" = method, scenario, experiment,
avg.tpr, halfCI.tpr,
avg.fpr, halfCI.fpr,
avg.tnr, halfCI.tnr,
avg.fnr, halfCI.fnr,
avg.hamMean, med.hamMean, halfCI.hamMean)
df$Method <- mapvalues(df$Method, from = c("Cpdag"), to = c("IMEC"))
df$Method <- mapvalues(df$Method, from = c("Leong"), to = c("DP"))
df$Method <- mapvalues(df$Method, from = c("ParentSet"), to = c("PS"))
df$Method <- mapvalues(df$Method, from = c("Random"), to = c("R"))
df$Method <- mapvalues(df$Method, from = c("Bninfo"), to = c("bninfo"))
# levels
levels(df$Method)
df$Method = factor(df$Method, levels(df$Method)[c(4,5,3,1,2,6)])
levels(df$Method)
MECColor<- "#E41A1C" #red
PSColor <- "#FF7F00" #orange
DPColor <- "#377EB8" # blue
BninfoColor <- "#4DAF4A" # green
IMECColor <- "#984EA3" # purple
RandomColor <- "#000000" #black
myColors = c(MECColor, PSColor, DPColor, BninfoColor, IMECColor, RandomColor)
#myColors = c("#F564E3", "#B79F00", "#00BA38", "#00BFC4","#F8766D")# colors without PWC
names(myColors) <- levels(df$Method)
colScale <- scale_colour_manual(name = "Method", values = myColors)
## HAMMING DISTANCE / L1 ERROR
# plot mean Hamming distance across experiments (all for the same scenario)
pMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,12) +
labs(title = "Mean Hamming Distance",x="Experiment Number",y="Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=16));pMeanHamming
pTPR <- ggplot(data=df, aes(x=experiment, y = avg.tpr))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.tpr-halfCI.tpr, ymax=avg.tpr+halfCI.tpr, color = Method), width=.1)+
labs(title = "True Positive Rate",x="Experiment Number",y="True Positive Edge Rate")+
colScale +
#ylim(0.5,1)+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(breaks= seq(from = 0.5, to = 1, by = 0.1))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=16));pTPR
folderName <- c("Leong", "Random","Bninfo", "MEC")
Scen <- c("134","134","134","134")
nNodes <-8
# set directory to save files
outPath <- "C:/Users/Michele/Documents/Jeff Miller/Paper Draft/Images/Simulations/Asia"
setwd(outPath); getwd()
# set label for saving graphs
label <- 'asia_MEC'
# initialize vectors that will be columns of data frame
method <- c()
scenario <- c()
experiment <- c()
# accuracy of network inference
avg.tpr <-c(); halfCI.tpr <- c()
avg.fpr <-c(); halfCI.fpr <- c()
avg.tnr <-c(); halfCI.tnr <- c()
avg.fnr <-c(); halfCI.fnr <- c()
# Hamming distance
avg.hamMean <- c(); med.hamMean <- c();halfCI.hamMean <- c()
for(i in 1:length(folderName)){
print(folderName[i])
# Hamming distance
hamMean<- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/", folderName[i],"/Scen",Scen[i],"/hammingMean_Results.csv",sep=""), na.strings = "NaN", header = F)
nSIM <- nrow(hamMean)
nExp <- ncol(hamMean)
method <- c(method, rep(folderName[i], times = nExp))
scenario <- c(scenario, rep(Scen[i], times = nExp))
experiment <- c(experiment, 1:nExp)
avg.hamMean <- c(avg.hamMean, apply(hamMean, MARGIN = 2, function(x) mean(x,na.rm = T)))
med.hamMean <- c(med.hamMean, apply(hamMean, MARGIN = 2, function(x) median(x,na.rm = T)))
se.ham <- apply(hamMean, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.hamMean <- c(halfCI.hamMean, (qt(0.975,nSIM-1) * se.ham)) # 95% CI
halfCI.hamMean <- c(halfCI.hamMean, se.ham) # one standard error
# accuracy of network inference
tpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tpr <- c(avg.tpr, apply(tpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tpr  <- apply(tpr, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.tpr <- c(halfCI.tpr, (qt(0.975,nSIM-1) * se.tpr)) # 95% CI
halfCI.tpr <- c(halfCI.tpr, se.tpr) # one standard error
fpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fpr <- c(avg.fpr, apply(fpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fpr  <- apply(fpr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fpr <- c(halfCI.fpr, (qt(0.975,nSIM-1) * se.fpr))
tnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tnr <- c(avg.tnr, apply(tnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tnr  <- apply(tnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.tnr <- c(halfCI.tnr, (qt(0.975,nSIM-1) * se.tnr))
fnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fnr <- c(avg.fnr, apply(fnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fnr  <- apply(fnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fnr <- c(halfCI.fnr, (qt(0.975,nSIM-1) * se.fnr))
}
# combine columns into dataframe
df <- data.frame("Method" = method, scenario, experiment,
avg.tpr, halfCI.tpr,
avg.fpr, halfCI.fpr,
avg.tnr, halfCI.tnr,
avg.fnr, halfCI.fnr,
avg.hamMean, med.hamMean, halfCI.hamMean)
#df$Method <- mapvalues(df$Method, from = c("Cpdag"), to = c("IMEC"))
df$Method <- mapvalues(df$Method, from = c("Leong"), to = c("DP"))
#df$Method <- mapvalues(df$Method, from = c("ParentSet"), to = c("PS"))
df$Method <- mapvalues(df$Method, from = c("Random"), to = c("R"))
df$Method <- mapvalues(df$Method, from = c("Bninfo"), to = c("bninfo"))
# levels
levels(df$Method)
# rearranged levels to be: MEC, DP, bninfo, R
levels(df$Method)
MECColor<- "#E41A1C" #red
#PSColor <- "#FF7F00" #orange
DPColor <- "#377EB8" # blue
BninfoColor <- "#4DAF4A" # green
#IMECColor <- "#984EA3" # purple
RandomColor <- "#000000" #black
myColors = c(MECColor, DPColor, BninfoColor, RandomColor)
#myColors = c("#F564E3", "#B79F00", "#00BA38", "#00BFC4","#F8766D")# colors without PWC
names(myColors) <- levels(df$Method)
colScale <- scale_colour_manual(name = "Method", values = myColors)
## HAMMING DISTANCE / L1 ERROR
# plot mean Hamming distance across experiments (all for the same scenario)
pMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,12) +
labs(title = "Mean Hamming Distance",x="Experiment Number",y="Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=16));pMeanHamming
names(myColors)
# rearranged levels to be: MEC, DP, bninfo, R
levels(df$Method)
# levels
levels(df$Method)
df$Method = factor(df$Method, levels(df$Method)[c(3,2,1,4)])
# rearranged levels to be: MEC, DP, bninfo, R
levels(df$Method)
MECColor<- "#E41A1C" #red
#PSColor <- "#FF7F00" #orange
DPColor <- "#377EB8" # blue
BninfoColor <- "#4DAF4A" # green
#IMECColor <- "#984EA3" # purple
RandomColor <- "#000000" #black
myColors = c(MECColor, DPColor, BninfoColor, RandomColor)
#myColors = c("#F564E3", "#B79F00", "#00BA38", "#00BFC4","#F8766D")# colors without PWC
names(myColors) <- levels(df$Method)
colScale <- scale_colour_manual(name = "Method", values = myColors)
## HAMMING DISTANCE / L1 ERROR
# plot mean Hamming distance across experiments (all for the same scenario)
pMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,12) +
labs(title = "Mean Hamming Distance",x="Experiment Number",y="Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=16));pMeanHamming
## HAMMING DISTANCE / L1 ERROR
# plot mean Hamming distance across experiments (all for the same scenario)
pMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,12) +
labs(title = "Mean Hamming Distance",x="Experiment Number",y="Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pMeanHamming
pTPR <- ggplot(data=df, aes(x=experiment, y = avg.tpr))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.tpr-halfCI.tpr, ymax=avg.tpr+halfCI.tpr, color = Method), width=.1)+
labs(title = "True Positive Rate",x="Experiment Number",y="True Positive Edge Rate")+
colScale +
#ylim(0.5,1)+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(breaks= seq(from = 0.5, to = 1, by = 0.1))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pTPR
combined <- (pMeanHamming + theme(plot.margin = unit(c(0,30,0,0), "pt"))) +
(pTPR + theme(plot.margin = unit(c(0,0,0,30), "pt"))) +
plot_layout(guides = 'collect') & theme(legend.position = "bottom")
combined
ggsave(filename=paste0("combined_",label,".png"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("combined_",label,".eps"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("combined_",label,".pdf"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
pLogMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,8) +
labs(title = "Log Mean Hamming Distance",x="Experiment Number",y="Log Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(trans = "log10")+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pLogMeanHamming
pLogMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
ylim(-0.2, 10) +
labs(title = "Log Mean Hamming Distance",x="Experiment Number",y="Log Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(trans = "log10")+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pLogMeanHamming
pLogMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
labs(title = "Log Mean Hamming Distance",x="Experiment Number",y="Log Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(trans = "log10", limits = c(-0.2,10)) +
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pLogMeanHamming
pLogMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
labs(title = "Log Mean Hamming Distance",x="Experiment Number",y="Log Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(trans = "log10", limits = c(-10,10)) +
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pLogMeanHamming
pLogMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 1)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
labs(title = "Log Mean Hamming Distance",x="Experiment Number",y="Log Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(trans = "log10") +
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pLogMeanHamming
ggsave(filename=paste0("logmeanHamming_",label,".png"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("logmeanHamming_",label,".png"),
plot=pLogMeanHamming,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("logmeanHamming_",label,".eps"),
plot=pLogMeanHamming,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("logmeanHamming_",label,".pdf"),
plot=pLogMeanHamming,
width=8,height=4.5, units="in", dpi=600)
folderName <- c("Random","Bninfo","AdaptiveChild","Leong", "MEC") # could add ParentSet if I want to (also Scen 129)
Scen <- c("129","129","129","129","129")
nNodes <-8
# set directory to save files
outPath <- "C:/Users/Michele/Documents/Jeff Miller/Paper Draft/Images/Simulations/Tree8"
setwd(outPath); getwd()
# set label for saving graphs
label <- 'tree8_MEC'
# initialize vectors that will be columns of data frame
method <- c()
scenario <- c()
experiment <- c()
# accuracy of network inference
avg.tpr <-c(); halfCI.tpr <- c()
avg.fpr <-c(); halfCI.fpr <- c()
avg.tnr <-c(); halfCI.tnr <- c()
avg.fnr <-c(); halfCI.fnr <- c()
# Hamming distance
avg.hamMean <- c(); med.hamMean <- c();halfCI.hamMean <- c()
for(i in 1:length(folderName)){
print(folderName[i])
# Hamming distance
hamMean<- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/", folderName[i],"/Scen",Scen[i],"/hammingMean_Results.csv",sep=""), na.strings = "NaN", header = F)
nSIM <- nrow(hamMean)
nExp <- ncol(hamMean)
method <- c(method, rep(folderName[i], times = nExp))
scenario <- c(scenario, rep(Scen[i], times = nExp))
experiment <- c(experiment, 1:nExp)
avg.hamMean <- c(avg.hamMean, apply(hamMean, MARGIN = 2, function(x) mean(x,na.rm = T)))
med.hamMean <- c(med.hamMean, apply(hamMean, MARGIN = 2, function(x) median(x,na.rm = T)))
se.ham <- apply(hamMean, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.hamMean <- c(halfCI.hamMean, (qt(0.975,nSIM-1) * se.ham)) # 95% CI
halfCI.hamMean <- c(halfCI.hamMean, se.ham) # one standard error
# accuracy of network inference
tpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tpr <- c(avg.tpr, apply(tpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tpr  <- apply(tpr, MARGIN = 2, sd) / sqrt(nSIM)
#halfCI.tpr <- c(halfCI.tpr, (qt(0.975,nSIM-1) * se.tpr)) # 95% CI
halfCI.tpr <- c(halfCI.tpr, se.tpr) # one standard error
fpr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fpr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fpr <- c(avg.fpr, apply(fpr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fpr  <- apply(fpr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fpr <- c(halfCI.fpr, (qt(0.975,nSIM-1) * se.fpr))
tnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/tnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.tnr <- c(avg.tnr, apply(tnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.tnr  <- apply(tnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.tnr <- c(halfCI.tnr, (qt(0.975,nSIM-1) * se.tnr))
fnr <- read.csv(paste("C:/Users/Michele/Documents/Jeff Miller/BDAGL/BDAGLMZ/Sim Scenarios/compStructures/",folderName[i],"/Scen",Scen[i],"/fnr_Results.csv",sep=""), na.strings = "NaN", header = F)
avg.fnr <- c(avg.fnr, apply(fnr, MARGIN = 2, function(x) mean(x,na.rm = T)))
se.fnr  <- apply(fnr, MARGIN = 2, sd) / sqrt(nSIM)
halfCI.fnr <- c(halfCI.fnr, (qt(0.975,nSIM-1) * se.fnr))
}
# combine columns into dataframe
df <- data.frame("Method" = method, scenario, experiment,
avg.tpr, halfCI.tpr,
avg.fpr, halfCI.fpr,
avg.tnr, halfCI.tnr,
avg.fnr, halfCI.fnr,
avg.hamMean, med.hamMean, halfCI.hamMean)
#df$Method <- mapvalues(df$Method, from = c("Cpdag"), to = c("IMEC"))
df$Method <- mapvalues(df$Method, from = c("AdaptiveChild"), to = c("PWC"))
df$Method <- mapvalues(df$Method, from = c("Bninfo"), to = c("bninfo"))
df$Method <- mapvalues(df$Method, from = c("Leong"), to = c("DP"))
#df$Method <- mapvalues(df$Method, from = c("ParentSet"), to = c("PS"))
df$Method <- mapvalues(df$Method, from = c("Random"), to = c("R"))
# levels
levels(df$Method)
df$Method = factor(df$Method, levels(df$Method)[c(4,1,3,2,5)])
# rearranged levels to: MEC, PWC, DP, bninfo, R
levels(df$Method)
MECColor<- "#E41A1C" #red
#IMECColor <- "#984EA3" # purple
PWCColor <- "#FF7F00" #orange
DPColor <- "#377EB8" # blue
BninfoColor <- "#4DAF4A" # green
RandomColor <- "#000000" #black
myColors = c(MECColor, PWCColor, DPColor, BninfoColor, RandomColor)
# myColors <- brewer.pal(6,"Set2")
# myColors = c("#F564E3", "#B79F00", "#00BA38", "#00BFC4","#F8766D")
names(myColors) <- levels(df$Method)
colScale <- scale_colour_manual(name = "Method", values = myColors)
#######################################
# UPDATED PLOT CODE ON 4/14/2020 (LARGER FONT, NO SCENARIO NUMBER)
###########################################
## HAMMING DISTANCE / L1 ERROR
# plot mean Hamming distance across experiments (all for the same scenario)
pMeanHamming <- ggplot(data = df, aes(x=experiment, y = avg.hamMean))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 2)+
geom_errorbar(aes(ymin=avg.hamMean-halfCI.hamMean, ymax=avg.hamMean+halfCI.hamMean, color = Method), width=.1)+
colScale +
#scale_linetype_manual(values = c("solid","dashed"))+
#  ylim(-0.5,,max(avg.hamMean+halfCI.hamMean))+
#ylim(0,8) +
labs(title = "Mean Hamming Distance",x="Experiment Number",y="Mean Hamming Distance")+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
#  scale_y_continuous(breaks= seq(from = 0, to = 8, by = 1))+
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pMeanHamming
pTPR <- ggplot(data=df, aes(x=experiment, y = avg.tpr))+
geom_line(aes(color = Method), size = 1)+
geom_point(aes(color = Method),size = 2)+
geom_errorbar(aes(ymin=avg.tpr-halfCI.tpr, ymax=avg.tpr+halfCI.tpr, color = Method), width=.1)+
labs(title = "True Positive Rate",x="Experiment Number",y="True Positive Edge Rate")+
colScale +
#ylim(0.5,1)+
scale_x_continuous(breaks= seq(from = 1, to = nExp, by = 1))+
scale_y_continuous(breaks= seq(from = 0.5, to = 1, by = 0.1))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(plot.title = element_text(size = rel(1.1))) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(text = element_text(size=13));pTPR
combined <- (pMeanHamming + theme(plot.margin = unit(c(0,30,0,0), "pt"))) +
(pTPR + theme(plot.margin = unit(c(0,0,0,30), "pt"))) +
plot_layout(guides = 'collect') & theme(legend.position = "bottom")
combined
ggsave(filename=paste0("combined_",label,".png"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("combined_",label,".eps"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
ggsave(filename=paste0("combined_",label,".pdf"),
plot=combined,
width=8,height=4.5, units="in", dpi=600)
500000/100
5000/(600)
5000/(0.06*100)
5000/(6)
500/48
400000/150
400000/150 / (2)
400/18
install.packages("sp")
library("sp")
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
library(tidyverse)
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
install.packages("tidyverse")
setwd("~/GitHub/EV-charging-stations/station_elec_equipments_mv")
file_path <- ("~/GitHub/EV-charging-stations/station_elec_equipments_mv/station_elec_equipments_mv.csv")
df <- read.csv(file_path, header = T)
df <- read.csv(file_path, header = T)
file_path <- ("~/GitHub/EV-charging-stations/station_elec_equipments_mv/station_elec_equipments_mv.csv")
df <- read.csv(file_path, header = T)
head(df)
names(df)
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
library("tidyverse")
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
install.packages("tidyverse")
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
install.packages("tidyverse")
install.packages("tidyverse")
# note: https://www.naturalearthdata.com/ is an open-source repository of maps
library("tidyverse")
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
# install.packages(x) # warning: uncommenting this may take a number of minutes
lapply(x, library, character.only = TRUE) # load the required packages
